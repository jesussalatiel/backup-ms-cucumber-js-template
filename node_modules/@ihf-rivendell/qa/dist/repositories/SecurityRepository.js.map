{"version":3,"file":"SecurityRepository.js","sourceRoot":"","sources":["../../src/repositories/SecurityRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { DynamoDBDocumentClient, QueryCommand } from \"@aws-sdk/lib-dynamodb\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport { DateTime } from \"luxon\";\nimport { HttpMethod } from \"../integration/assets/httpConstants\";\nimport {\n  BaseRepository,\n  BaseRepositoryProps,\n  CustomerType,\n} from \"./BaseRepository\";\nimport { ISecurityOTP } from \"./interfaces/ISecurity\";\n\nexport enum SecurityResource {\n  SSO = \"/security/sso\",\n  TOKEN = \"/security/token\",\n  OTP = \"/security/otp\",\n  VALIDATE_OTP = \"/security/otp/{code}/validate\",\n}\n\nexport interface SecurityRepositoryProps extends BaseRepositoryProps {\n  lambdaClient: LambdaClient;\n  dynamoDbClient: DynamoDBDocumentClient;\n  securityOTPTable: string;\n  securityLambda: string;\n}\n\nexport class SecurityRepository extends BaseRepository {\n  constructor(protected props: SecurityRepositoryProps) {\n    super(props);\n  }\n\n  private async sendLambdaCommand(payload: object) {\n    const invokeCommand = new InvokeCommand({\n      FunctionName: this.props.securityLambda,\n      Payload: fromUtf8(JSON.stringify(payload)),\n    });\n    const response = await this.props.lambdaClient.send(invokeCommand);\n    return this.processLambdaApiResponse(response);\n  }\n\n  async singleSignOn(externalId: string) {\n    const payload = {\n      resource: SecurityResource.SSO,\n      httpMethod: HttpMethod.POST,\n      headers: this.getExternalHeaders(),\n      body: JSON.stringify({\n        employee: {\n          externalId,\n        },\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async getExternalToken(code: string) {\n    const payload = {\n      resource: SecurityResource.TOKEN,\n      httpMethod: HttpMethod.POST,\n      headers: this.getExternalHeaders(),\n      body: JSON.stringify({\n        code,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findOTPs(securityOTP: Partial<ISecurityOTP>): Promise<ISecurityOTP[]> {\n    try {\n      const response = await this.props.dynamoDbClient.send(\n        new QueryCommand({\n          TableName: this.props.securityOTPTable,\n          KeyConditionExpression: \"#customerId = :customerId\",\n          FilterExpression:\n            \"#status = :status AND #creationDate > :creationDate\",\n          ExpressionAttributeNames: {\n            \"#customerId\": \"customerId\",\n            \"#status\": \"status\",\n            \"#creationDate\": \"creationDate\",\n          },\n          ExpressionAttributeValues: {\n            \":customerId\": securityOTP.customer?.id,\n            \":status\": securityOTP.status,\n            \":creationDate\": DateTime.now()\n              .setZone(\"America/Lima\")\n              .set({ hour: 0, minute: 1, second: 0, millisecond: 0 })\n              .toMillis(),\n          },\n        }),\n      );\n      return response.Items.map((item) => ({\n        customer: {\n          id: item.customerId,\n        },\n        code: item.code,\n        resource: item.resource,\n        status: item.status,\n        creationDate: item.creationDate,\n        lastUpdateDate: item.lastUpdateDate,\n      }));\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async createOTP(securityOTP: Partial<ISecurityOTP>) {\n    const payload = {\n      resource: SecurityResource.OTP,\n      httpMethod: HttpMethod.POST,\n      headers: this.getInternalHeaders({\n        customerId: securityOTP.customer?.id,\n        customerType: CustomerType.INDIVIDUAL,\n      }),\n      body: JSON.stringify({\n        resource: securityOTP.resource,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async validateOTP(securityOTP: Partial<ISecurityOTP>) {\n    const payload = {\n      resource: SecurityResource.VALIDATE_OTP,\n      httpMethod: HttpMethod.POST,\n      pathParameters: {\n        code: securityOTP.code,\n      },\n      headers: this.getInternalHeaders({\n        customerId: securityOTP.customer?.id,\n        customerType: CustomerType.INDIVIDUAL,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n}\n"]}
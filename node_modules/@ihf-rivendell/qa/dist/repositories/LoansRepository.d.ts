import { LambdaClient } from "@aws-sdk/client-lambda";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { BaseRepository, BaseRepositoryProps } from "./BaseRepository";
import { HeaderType } from "../integration/assets/httpConstants";
import { IInstallment, ILoan, ITransaction } from "./interfaces";
export interface LoansRepositoryProps extends BaseRepositoryProps {
    dynamoDbClient: DynamoDBDocumentClient;
    lambdaClient: LambdaClient;
    loansLambda: string;
    loansTable: string;
    loansInstallmentsTable: string;
    loansSimulationsTable: string;
    mambuLoansTable: string;
    accountingTable?: string;
}
export declare class LoansRepository extends BaseRepository {
    protected props: LoansRepositoryProps;
    constructor(props: LoansRepositoryProps);
    private sendLambdaRequest;
    findByCustomerId(customerId: string, withPendingInstallments?: boolean): Promise<any>;
    findByDate(startDate: string, endDate: string): Promise<any>;
    findById(loan: Partial<ILoan>): Promise<any>;
    findInstallments(loanId: string, customerId: string): Promise<any>;
    findSimulationById(simulationId: string): Promise<any>;
    createLoan(loan: Partial<ILoan>): Promise<any>;
    createSimulation(props: {
        loan: object;
        headerType: HeaderType;
        customerId: string;
    }): Promise<any>;
    createTransaction(transaction: Partial<ITransaction>, loanId: string): Promise<any>;
    createTransactionNotification(transaction: Partial<ITransaction>): Promise<any>;
    findInstallmentByIndentity(loan: Partial<ILoan>): Promise<any>;
    deleteTransaction(loan: Partial<ILoan>): Promise<any>;
    delete(props: {
        loan: {
            id: string;
        };
        customer: {
            id: string;
        };
    }): Promise<any>;
    reconciliations(props: {
        externalId: string;
        branch: string;
        date: string;
        type: string;
    }): Promise<any>;
    update(props: {
        loanId: string;
        customerId: string;
        body: any;
    }): Promise<any>;
    findAccountingItem(loanId: string): Promise<Record<string, any>[]>;
    activateLoan(props: {
        loan: Partial<ILoan>;
        activateLoan: boolean;
        headerType: HeaderType;
    }): Promise<any>;
    findPreviewPayOff(loanId: string, customerId: string): Promise<any>;
    searchCreditWithIBK(documentType: string, documentNumber: string): Promise<any>;
    createPaymentWithIBK(props: {
        loan: {
            id: string;
        };
        customer: {
            id: string;
        };
        installments: object;
        amount: number;
        currency: string;
        prepaymentMethod: string;
    }): Promise<any>;
    cancelPaymentWithIBK(loanId: string, transactionId: string): Promise<any>;
    transactionReturnWithIBK(props: {
        loan: {
            id: string;
        };
        body: object;
    }): Promise<any>;
    private updateAttribute;
    updateAttributes(loan: Partial<ILoan>): Promise<void>;
    deleteById(loanId: string, customerId: string): Promise<void>;
    deleteByCustomerId(customerId: string): Promise<void>;
    updateInstallment(installment: Partial<IInstallment>): Promise<void>;
}

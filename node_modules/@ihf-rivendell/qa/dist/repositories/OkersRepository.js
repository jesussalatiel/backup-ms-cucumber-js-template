"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OkersRepository = void 0;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const BaseRepository_1 = require("./BaseRepository");
class OkersRepository extends BaseRepository_1.BaseRepository {
    props;
    constructor(props) {
        super(props);
        this.props = props;
    }
    getTimestamp() {
        return Date.now();
    }
    async initiateAuth(username, password) {
        const result = await this.props.cognitoClient.send(new client_cognito_identity_provider_1.InitiateAuthCommand({
            ClientId: this.props.applications.internalOps,
            AuthFlow: "USER_PASSWORD_AUTH",
            AuthParameters: {
                USERNAME: username,
                PASSWORD: password,
            },
        }));
        const token = result.AuthenticationResult?.IdToken;
        return { token };
    }
    async changePassword(username, password) {
        await this.props.cognitoClient.send(new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
            UserPoolId: this.props.userPoolId,
            Username: username,
            Password: password,
            Permanent: true,
        }));
    }
    async deleteOkerCognito(username) {
        await this.props.cognitoClient.send(new client_cognito_identity_provider_1.AdminDeleteUserCommand({
            UserPoolId: this.props.userPoolId,
            Username: username,
        }));
    }
    async findOkerCognitoByUsername(username) {
        const { Users: users } = await this.props.cognitoClient.send(new client_cognito_identity_provider_1.ListUsersCommand({
            UserPoolId: this.props.userPoolId,
            Filter: `email = "${username}"`,
        }));
        if (users?.length) {
            return users.length;
        }
        return 0;
    }
    async createOkerCognito(oker) {
        try {
            const params = {
                UserPoolId: this.props.userPoolId,
                Username: oker.email,
                UserAttributes: [
                    {
                        Name: "given_name",
                        Value: oker.name,
                    },
                    {
                        Name: "family_name",
                        Value: oker.lastName,
                    },
                    {
                        Name: "preferred_username",
                        Value: oker.email,
                    },
                    {
                        Name: "email",
                        Value: oker.email,
                    },
                    {
                        Name: "phone_number",
                        Value: oker.phoneNumber,
                    },
                    {
                        Name: "email_verified",
                        Value: "true",
                    },
                ],
            };
            const okerCognito = await this.props.cognitoClient.send(new client_cognito_identity_provider_1.AdminCreateUserCommand(params));
            await this.props.cognitoClient.send(new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
                UserPoolId: this.props.userPoolId,
                Username: okerCognito.User?.Username,
                Password: oker.password,
                Permanent: true,
            }));
            return {
                id: okerCognito.User?.Username,
                ...oker,
                password: "******",
            };
        }
        catch (e) {
            throw new Error(e.message);
        }
    }
}
exports.OkersRepository = OkersRepository;
//# sourceMappingURL=OkersRepository.js.map
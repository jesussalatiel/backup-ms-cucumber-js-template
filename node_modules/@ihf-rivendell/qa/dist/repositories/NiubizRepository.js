"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardsRepository = exports.NiubizResource = void 0;
const client_lambda_1 = require("@aws-sdk/client-lambda");
const util_utf8_1 = require("@aws-sdk/util-utf8");
const BaseRepository_1 = require("./BaseRepository");
const httpConstants_1 = require("../integration/assets/httpConstants");
var NiubizResource;
(function (NiubizResource) {
    NiubizResource["Niubiz"] = "/niubiz";
    NiubizResource["NiubizCardId"] = "/cards/{cardId}";
})(NiubizResource || (exports.NiubizResource = NiubizResource = {}));
class CardsRepository extends BaseRepository_1.BaseRepository {
    props;
    constructor(props) {
        super(props);
        this.props = props;
    }
    async sendLambdaCommand(payload) {
        const invokeCommand = new client_lambda_1.InvokeCommand({
            FunctionName: this.props.niubizLambda,
            Payload: (0, util_utf8_1.fromUtf8)(JSON.stringify(payload)),
        });
        const response = await this.props.lambdaClient.send(invokeCommand);
        return this.processLambdaApiResponse(response);
    }
    async create(niubiz) {
        const payload = {
            resource: NiubizResource.Niubiz,
            httpMethod: httpConstants_1.HttpMethod.POST,
            requestContext: { identity: { sourceIp: niubiz.clientIp } },
            headers: this.getInternetBankingHeaders({
                customerId: niubiz.customerId,
            }),
            body: JSON.stringify({
                transactionToken: "",
            }),
        };
        return this.sendLambdaCommand(payload);
    }
    async findWithCustomerId(niubiz) {
        const payload = {
            resource: NiubizResource.Niubiz,
            httpMethod: httpConstants_1.HttpMethod.GET,
            requestContext: { identity: { sourceIp: niubiz.clientIp } },
            headers: this.getInternetBankingHeaders({
                customerId: niubiz.customerId,
            }),
        };
        return this.sendLambdaCommand(payload);
    }
    async payment(niubiz) {
        const payload = {
            resource: NiubizResource.NiubizCardId,
            httpMethod: httpConstants_1.HttpMethod.POST,
            pathParameters: { cardId: niubiz.cardId },
            requestContext: { identity: { sourceIp: niubiz.clientIp } },
            headers: this.getInternetBankingHeaders({
                customerId: niubiz.customerId,
            }),
            body: JSON.stringify({
                amount: "",
                purchaseNumber: "",
            }),
        };
        return this.sendLambdaCommand(payload);
    }
    async delete(niubiz) {
        const payload = {
            resource: NiubizResource.NiubizCardId,
            httpMethod: httpConstants_1.HttpMethod.DELETE,
            pathParameters: { cardId: niubiz.cardId },
            headers: this.getInternetBankingHeaders({
                customerId: niubiz.customerId,
            }),
        };
        return this.sendLambdaCommand(payload);
    }
}
exports.CardsRepository = CardsRepository;
//# sourceMappingURL=NiubizRepository.js.map
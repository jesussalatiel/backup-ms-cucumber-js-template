{"version":3,"file":"NotificationsRepository.js","sourceRoot":"","sources":["../../src/repositories/NotificationsRepository.ts"],"names":[],"mappings":";;;AAAA,kDAA8C;AAC9C,0DAAqE;AACrE,wDAA2E;AAC3E,qDAAuE;AASvE,MAAa,uBAAwB,SAAQ,+BAAc;IACnC;IAAtB,YAAsB,KAAmC;QACvD,KAAK,CAAC,KAAK,CAAC,CAAC;QADO,UAAK,GAAL,KAAK,CAA8B;IAEzD,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,UAAkB,EAAE,UAAkB;QACzE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CACjD,IAAI,6BAAa,CAAC;YAChB,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB;YAC5C,OAAO,EAAE,IAAA,oBAAQ,EACf,IAAI,CAAC,SAAS,CAAC;gBACb,aAAa,EAAE,sBAAsB;gBACrC,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE;aACjD,CAAC,CACH;SACF,CAAC,CACH,CAAC;QACF,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,EAAU;QAC/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CACjD,IAAI,yBAAU,CAAC;YACb,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;YAChC,GAAG,EAAE,EAAE,EAAE,EAAE;SACZ,CAAC,CACH,CAAC;QAEF,OAAO,MAAM,CAAC,IAAI,EAAE,OAAO,IAAI,WAAW,CAAC;IAC7C,CAAC;CACF;AA9BD,0DA8BC","sourcesContent":["import { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { DynamoDBDocumentClient, GetCommand } from \"@aws-sdk/lib-dynamodb\";\nimport { BaseRepository, BaseRepositoryProps } from \"./BaseRepository\";\n\nexport interface NotificationsRepositoryProps extends BaseRepositoryProps {\n  lambdaClient: LambdaClient;\n  dynamoDbClient: DynamoDBDocumentClient;\n  notificationsLambda: string;\n  cacheTable: string;\n}\n\nexport class NotificationsRepository extends BaseRepository {\n  constructor(protected props: NotificationsRepositoryProps) {\n    super(props);\n  }\n\n  async sendContractSignedNotification(customerId: string, contractId: string) {\n    const response = await this.props.lambdaClient.send(\n      new InvokeCommand({\n        FunctionName: this.props.notificationsLambda,\n        Payload: fromUtf8(\n          JSON.stringify({\n            \"detail-type\": \"contract:update:done\",\n            detail: { customerId, data: { id: contractId } },\n          }),\n        ),\n      }),\n    );\n    return this.processLambdaApiResponse(response);\n  }\n\n  async findNotification(id: string) {\n    const result = await this.props.dynamoDbClient.send(\n      new GetCommand({\n        TableName: this.props.cacheTable,\n        Key: { id },\n      }),\n    );\n\n    return result.Item?.message || \"not found\";\n  }\n}\n"]}
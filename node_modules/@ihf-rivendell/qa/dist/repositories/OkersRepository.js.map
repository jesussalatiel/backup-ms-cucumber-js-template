{"version":3,"file":"OkersRepository.js","sourceRoot":"","sources":["../../src/repositories/OkersRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AdminCreateUserCommand,\n  AdminDeleteUserCommand,\n  AdminSetUserPasswordCommand,\n  CognitoIdentityProviderClient,\n  InitiateAuthCommand,\n  ListUsersCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport { BaseRepository, BaseRepositoryProps } from \"./BaseRepository\";\nimport { Oker } from \"./interfaces/IOkers\";\n\nexport interface OkersRepositoryProps extends BaseRepositoryProps {\n  cognitoClient: CognitoIdentityProviderClient;\n  userPoolId: string;\n}\n\nexport class OkersRepository extends BaseRepository {\n  constructor(protected props: OkersRepositoryProps) {\n    super(props);\n  }\n\n  protected getTimestamp() {\n    return Date.now();\n  }\n\n  async initiateAuth(username: string, password: string) {\n    const result = await this.props.cognitoClient.send(\n      new InitiateAuthCommand({\n        ClientId: this.props.applications.internalOps,\n        AuthFlow: \"USER_PASSWORD_AUTH\",\n        AuthParameters: {\n          USERNAME: username,\n          PASSWORD: password,\n        },\n      }),\n    );\n    const token = result.AuthenticationResult?.IdToken;\n    return { token };\n  }\n\n  async changePassword(username: string, password: string) {\n    await this.props.cognitoClient.send(\n      new AdminSetUserPasswordCommand({\n        UserPoolId: this.props.userPoolId,\n        Username: username,\n        Password: password,\n        Permanent: true,\n      }),\n    );\n  }\n\n  async deleteOkerCognito(username: string) {\n    await this.props.cognitoClient.send(\n      new AdminDeleteUserCommand({\n        UserPoolId: this.props.userPoolId,\n        Username: username,\n      }),\n    );\n  }\n\n  async findOkerCognitoByUsername(username: string) {\n    const { Users: users } = await this.props.cognitoClient.send(\n      new ListUsersCommand({\n        UserPoolId: this.props.userPoolId,\n        Filter: `email = \"${username}\"`,\n      }),\n    );\n    if (users?.length) {\n      return users.length;\n    }\n\n    return 0;\n  }\n\n  async createOkerCognito(oker: Partial<Oker>) {\n    try {\n      const params = {\n        UserPoolId: this.props.userPoolId,\n        Username: oker.email,\n        UserAttributes: [\n          {\n            Name: \"given_name\",\n            Value: oker.name,\n          },\n          {\n            Name: \"family_name\",\n            Value: oker.lastName,\n          },\n          {\n            Name: \"preferred_username\",\n            Value: oker.email,\n          },\n          {\n            Name: \"email\",\n            Value: oker.email,\n          },\n          {\n            Name: \"phone_number\",\n            Value: oker.phoneNumber,\n          },\n          {\n            Name: \"email_verified\",\n            Value: \"true\",\n          },\n        ],\n      };\n\n      const okerCognito = await this.props.cognitoClient.send(\n        new AdminCreateUserCommand(params),\n      );\n\n      await this.props.cognitoClient.send(\n        new AdminSetUserPasswordCommand({\n          UserPoolId: this.props.userPoolId,\n          Username: okerCognito.User?.Username,\n          Password: oker.password,\n          Permanent: true,\n        }),\n      );\n\n      return {\n        id: okerCognito.User?.Username,\n        ...oker,\n        password: \"******\",\n      };\n    } catch (e: any) {\n      throw new Error(e.message);\n    }\n  }\n}\n"]}
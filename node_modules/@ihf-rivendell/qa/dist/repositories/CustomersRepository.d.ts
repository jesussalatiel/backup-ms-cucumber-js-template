import { LambdaClient } from "@aws-sdk/client-lambda";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { CognitoRepository, CognitoRepositoryProps } from "./CognitoRepository";
import { ICustomer } from "./interfaces/ICustomers";
export declare enum CustomerResource {
    CustomerById = "/customers/{customerId}",
    Customers = "/customers"
}
export interface CustomersRepositoryProps extends CognitoRepositoryProps {
    lambdaClient: LambdaClient;
    dynamoDbClient: DynamoDBDocumentClient;
    customersLambda: string;
    customersTable: string;
    groupName: string;
    accountingTable: string;
    customersReniecTable: string;
}
export declare class CustomersRepository extends CognitoRepository {
    protected props: CustomersRepositoryProps;
    constructor(props: CustomersRepositoryProps);
    protected getTimestamp(): number;
    private sendLambdaCommand;
    invokeWarmUp(): Promise<boolean>;
    findById(customerId: string, params?: {
        extended?: boolean;
    }): Promise<any>;
    findByIdentityDocument(identityType: string, identityNumber: string): Promise<any>;
    find(endPoint: string): Promise<any>;
    webHook(path: string, customerId?: string): Promise<any>;
    createCustomer(customer: Partial<ICustomer>): Promise<any>;
    createMasiveCustomersReniec(customers: Partial<ICustomer>[]): Promise<number>;
    searchReniecCustomer(identityType: string, identityNumber: string): Promise<import("@aws-sdk/lib-dynamodb").QueryCommandOutput>;
    update(customerId: string, body: any, isIndividual?: boolean): Promise<any>;
    sendInvitation(customerId: string, body: any): Promise<any>;
    findByMobile(mobile: string): Promise<any>;
    private updateAttribute;
    updateStatusAndNextAction(customer: {
        id: string;
        status?: string;
    }): Promise<void>;
    private updateAttributeDynamo;
    updateDocumentKeyValidated(customerId: string, action: string): Promise<void>;
    updateMobile(customer: Partial<ICustomer>): Promise<void>;
    deleteById(customerId: string): Promise<void>;
    deleteByMobile(mobile: string): Promise<void>;
    deleteByIdentityDocument(type: string, number: string): Promise<void>;
    preSignUpTrigger(customer: ICustomer): Promise<any>;
    private convertToJson;
    generateLocationDataset(config: {
        datasetSource: string;
        inputFile: string;
        outputFile: string;
    }): Promise<void>;
    findAccountingItem(customerId: string): Promise<Record<string, any>[]>;
    findCustomerIdByMobile(mobile: string): Promise<string>;
}

{"version":3,"file":"EmployeesRepository.js","sourceRoot":"","sources":["../../src/repositories/EmployeesRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AdminCreateUserCommand,\n  AdminSetUserPasswordCommand,\n  ListUsersCommand,\n  CognitoIdentityProviderClient,\n  InitiateAuthCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport {\n  DynamoDBDocumentClient,\n  TransactWriteCommand,\n  TransactWriteCommandOutput,\n} from \"@aws-sdk/lib-dynamodb\";\nimport { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport { BaseRepository, BaseRepositoryProps } from \"./BaseRepository\";\nimport { HttpMethod } from \"../integration/assets/httpConstants\";\nimport { Employee } from \"./interfaces\";\n\nconst TRANSACTION_MAX_ITEMS = 100;\nconst MAX_PARALLEL_PROMISES = 20;\n\nenum EmployeeResource {\n  Employees = \"/employees\",\n  EmployeesById = \"/employees/{employeeId}\",\n}\n\nexport interface EmployeesRepositoryProps extends BaseRepositoryProps {\n  cognitoClient: CognitoIdentityProviderClient;\n  lambdaClient: LambdaClient;\n  employeesLambda: string;\n  userPoolId: string;\n  dynamoDbClient: DynamoDBDocumentClient;\n  employeesTable: string;\n  employeesSalt: string;\n}\n\nexport class EmployeesRepository extends BaseRepository {\n  constructor(protected props: EmployeesRepositoryProps) {\n    super(props);\n  }\n\n  protected getTimestamp() {\n    return Date.now();\n  }\n\n  private async sendLambdaCommand(payload: any) {\n    const invokeCommand = new InvokeCommand({\n      FunctionName: this.props.employeesLambda,\n      Payload: fromUtf8(JSON.stringify(payload)),\n    });\n\n    const response = await this.props.lambdaClient.send(invokeCommand);\n    return this.processLambdaApiResponse(response);\n  }\n\n  async findById(employeeId: string) {\n    const payload = {\n      resource: EmployeeResource.EmployeesById,\n      httpMethod: HttpMethod.GET,\n      pathParameters: { employeeId },\n      headers: this.getBackOfficeHeaders(),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findByExternalId(externalId: string) {\n    const payload = {\n      resource: EmployeeResource.Employees,\n      httpMethod: HttpMethod.GET,\n      queryStringParameters: {\n        externalId,\n      },\n      headers: this.getBackOfficeHeaders(),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  private async findEmployeeCognitoByExternalId(externalId: string) {\n    const { Users: users } = await this.props.cognitoClient.send(\n      new ListUsersCommand({\n        UserPoolId: this.props.userPoolId,\n        Filter: `preferred_username = \"${externalId}\"`,\n      }),\n    );\n    return !!users?.length;\n  }\n\n  async createEmployee(employee: Partial<Employee>) {\n    const payload = {\n      resource: EmployeeResource.Employees,\n      httpMethod: HttpMethod.POST,\n      headers: this.getBackOfficeHeaders(),\n      body: JSON.stringify(employee),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async updateEmployee(employee: Partial<Employee>) {\n    const payload = {\n      resource: EmployeeResource.EmployeesById,\n      httpMethod: HttpMethod.PATCH,\n      pathParameters: { employeeId: employee.id },\n      headers: this.getBackOfficeHeaders(),\n      body: JSON.stringify(employee),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async deleteById(employeeId: string) {\n    const payload = {\n      resource: EmployeeResource.EmployeesById,\n      httpMethod: HttpMethod.DELETE,\n      pathParameters: { employeeId },\n      headers: this.getBackOfficeHeaders(),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async createMasiveEmployees(employees: Partial<Employee>[]) {\n    try {\n      const result = await this.createEmployeesCognito(employees);\n      const employeesLength = await this.createEmployeesDynamo(result);\n      return employeesLength;\n    } catch (e: any) {\n      throw new Error(e.message);\n    }\n  }\n\n  async initiateAuth(username: string, password: string) {\n    const result = await this.props.cognitoClient.send(\n      new InitiateAuthCommand({\n        ClientId: this.props.applications.backOffice,\n        AuthFlow: \"USER_PASSWORD_AUTH\",\n        AuthParameters: {\n          USERNAME: username,\n          PASSWORD: password,\n        },\n      }),\n    );\n    const token = result.AuthenticationResult?.IdToken;\n    return { token };\n  }\n\n  async changePassword(username: string, password: string) {\n    await this.props.cognitoClient.send(\n      new AdminSetUserPasswordCommand({\n        UserPoolId: this.props.userPoolId,\n        Username: username,\n        Password: password,\n        Permanent: true,\n      }),\n    );\n  }\n\n  private async createEmployeesCognito(employees: Partial<Employee>[]) {\n    try {\n      const newEmployees: Partial<Employee>[] = [];\n      await Promise.all(\n        employees.map(async (employee) => {\n          const params = {\n            UserPoolId: this.props.userPoolId,\n            Username: employee.externalId,\n            UserAttributes: [\n              {\n                Name: \"given_name\",\n                Value: employee.name,\n              },\n              {\n                Name: \"middle_name\",\n                Value: employee.middleName,\n              },\n              {\n                Name: \"family_name\",\n                Value: employee.lastName,\n              },\n              {\n                Name: \"preferred_username\",\n                Value: employee.externalId,\n              },\n              {\n                Name: \"custom:role\",\n                Value: employee.role,\n              },\n            ],\n          };\n          const existEmployee = await this.findEmployeeCognitoByExternalId(\n            employee.externalId,\n          );\n          if (!existEmployee) {\n            const result = await this.props.cognitoClient.send(\n              new AdminCreateUserCommand(params),\n            );\n            const password = this.createPassword(employee.externalId);\n            await this.changePassword(result.User?.Username!, password);\n\n            newEmployees.push({\n              id: result.User?.Username,\n              ...employee,\n            });\n          }\n        }),\n      );\n      return newEmployees;\n    } catch (e: any) {\n      throw new Error(e.message);\n    }\n  }\n\n  private async createEmployeesDynamo(employees: Partial<Employee>[]) {\n    const timestamp = this.getTimestamp();\n    const commandListDynamo: Promise<TransactWriteCommandOutput>[] = [];\n    for (let i = 0; i < employees.length; i += TRANSACTION_MAX_ITEMS) {\n      commandListDynamo.push(\n        this.props.dynamoDbClient.send(\n          new TransactWriteCommand({\n            TransactItems: employees\n              .slice(i, i + TRANSACTION_MAX_ITEMS)\n              .map((item) => ({\n                Put: {\n                  TableName: this.props.employeesTable,\n                  Item: {\n                    id: item.id!,\n                    motherLastName: item.motherLastName,\n                    company: item.company,\n                    creationDate: timestamp,\n                  },\n                },\n              })),\n          }),\n        ),\n      );\n    }\n    for (let i = 0; i < commandListDynamo.length; i += MAX_PARALLEL_PROMISES) {\n      // eslint-disable-next-line no-await-in-loop\n      await Promise.allSettled(\n        commandListDynamo.slice(i, i + MAX_PARALLEL_PROMISES),\n      );\n    }\n    return employees.length;\n  }\n\n  private createPassword(externalID: string) {\n    return `${externalID}${this.props.employeesSalt}`;\n  }\n}\n"]}
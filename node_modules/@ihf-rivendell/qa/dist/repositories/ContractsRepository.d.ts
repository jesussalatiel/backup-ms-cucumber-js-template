import { LambdaClient } from "@aws-sdk/client-lambda";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { BaseRepository, BaseRepositoryProps } from "./BaseRepository";
import { IContract } from "./interfaces/IContracts";
export declare enum ContractResource {
    Contracts = "/contracts",
    ContractById = "/contracts/{contractId}"
}
export interface ContractsRepositoryProps extends BaseRepositoryProps {
    dynamoDbClient: DynamoDBDocumentClient;
    lambdaClient: LambdaClient;
    contractsLambda: string;
    contractsTable: string;
}
export declare class ContractsRepository extends BaseRepository {
    protected props: ContractsRepositoryProps;
    constructor(props: ContractsRepositoryProps);
    private sendLambdaCommand;
    findById(customerId: string, contractId: string): Promise<any>;
    createContract(contract: IContract): Promise<any>;
    downloadByLoanId(props: {
        loan: {
            id: string;
        };
        customer: {
            id: string;
        };
        extended: string;
    }): Promise<any>;
    updateStatusSigned(contract: IContract): Promise<any>;
    findByCustomerId(customerId: string): Promise<Record<string, any>[]>;
    deleteByCustomerId(customerId: string): Promise<void>;
}

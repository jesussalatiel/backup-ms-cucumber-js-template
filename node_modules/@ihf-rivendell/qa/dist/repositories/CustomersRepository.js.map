{"version":3,"file":"CustomersRepository.js","sourceRoot":"","sources":["../../src/repositories/CustomersRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { writeFile } from \"node:fs/promises\";\nimport { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport {\n  AdminAddUserToGroupCommand,\n  AdminDeleteUserAttributesCommand,\n  AdminDeleteUserCommand,\n  AdminGetUserCommand,\n  AdminRemoveUserFromGroupCommand,\n  AdminUpdateUserAttributesCommand,\n  ListUsersCommand,\n} from \"@aws-sdk/client-cognito-identity-provider\";\nimport {\n  DeleteCommand,\n  DynamoDBDocumentClient,\n  QueryCommand,\n  UpdateCommand,\n  TransactWriteCommand,\n} from \"@aws-sdk/lib-dynamodb\";\nimport csv from \"csvtojson\";\nimport axios from \"axios\";\nimport { HeaderType, HttpMethod } from \"../integration/assets/httpConstants\";\nimport { CognitoRepository, CognitoRepositoryProps } from \"./CognitoRepository\";\nimport { ICustomer } from \"./interfaces/ICustomers\";\n\nconst TRANSACTION_MAX_ITEMS = 100;\nconst DOCUMENT_KEY_INDEX = \"documentKeyIndex\";\n\nexport enum CustomerResource {\n  CustomerById = \"/customers/{customerId}\",\n  Customers = \"/customers\",\n}\n\nexport interface CustomersRepositoryProps extends CognitoRepositoryProps {\n  lambdaClient: LambdaClient;\n  dynamoDbClient: DynamoDBDocumentClient;\n  customersLambda: string;\n  customersTable: string;\n  groupName: string;\n  accountingTable: string;\n  customersReniecTable: string;\n}\n\nexport class CustomersRepository extends CognitoRepository {\n  constructor(protected props: CustomersRepositoryProps) {\n    super(props);\n  }\n\n  protected getTimestamp() {\n    return Date.now();\n  }\n\n  private async sendLambdaCommand(payload: object) {\n    const invokeCommand = new InvokeCommand({\n      FunctionName: this.props.customersLambda,\n      Payload: fromUtf8(JSON.stringify(payload)),\n    });\n    const response = await this.props.lambdaClient.send(invokeCommand);\n    return this.processLambdaApiResponse(response);\n  }\n\n  async invokeWarmUp(): Promise<boolean> {\n    try {\n      const invokeCommand = new InvokeCommand({\n        FunctionName: this.props.customersLambda,\n        InvocationType: \"Event\",\n        Payload: fromUtf8(JSON.stringify({})),\n      });\n      await this.props.lambdaClient.send(invokeCommand);\n      return true;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  findById(customerId: string, params?: { extended?: boolean }) {\n    const payload = {\n      resource: CustomerResource.CustomerById,\n      httpMethod: HttpMethod.GET,\n      pathParameters: { customerId },\n      queryStringParameters: {\n        extended: params?.extended ? \"true\" : undefined,\n      },\n      headers: this.getInternetBankingHeaders({\n        customerId,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findByIdentityDocument(identityType: string, identityNumber: string) {\n    const payload = {\n      resource: CustomerResource.Customers,\n      httpMethod: HttpMethod.GET,\n      queryStringParameters: {\n        type: identityType,\n        number: identityNumber,\n      },\n      headers: this.getBackOfficeHeaders(),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async find(endPoint: string) {\n    const payload = {\n      resource: endPoint,\n      httpMethod: HttpMethod.GET,\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async webHook(path: string, customerId?: string) {\n    const payload = {\n      resource: `/webhooks/${path}`,\n      httpMethod: HttpMethod.POST,\n      headers: this.getBackOfficeHeaders(),\n      requestContext: {\n        authorizer: { claims: { sub: customerId } },\n      },\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async createCustomer(customer: Partial<ICustomer>) {\n    const payload = {\n      resource: CustomerResource.Customers,\n      httpMethod: HttpMethod.POST,\n      headers: this.getBackOfficeHeaders(),\n      body: JSON.stringify(customer),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async createMasiveCustomersReniec(customers: Partial<ICustomer>[]) {\n    const timestamp = this.getTimestamp();\n    for (let i = 0; i < customers.length; i += TRANSACTION_MAX_ITEMS) {\n      // eslint-disable-next-line no-await-in-loop\n      await new Promise((res) => {\n        setTimeout(res, 100);\n      });\n      // eslint-disable-next-line no-await-in-loop\n      await this.props.dynamoDbClient.send(\n        new TransactWriteCommand({\n          TransactItems: customers\n            .slice(i, i + TRANSACTION_MAX_ITEMS)\n            .map((item) => ({\n              Put: {\n                TableName: this.props.customersReniecTable,\n                Item: {\n                  id: this.getUuid(),\n                  documentKey: `${item.identityDocument.type}${item.identityDocument.number}`,\n                  name: item.name,\n                  middleName:\n                    item.middleName.length > 0 ? item.middleName : undefined,\n                  lastName: item.lastName,\n                  motherLastName: item.motherLastName,\n                  creationDate: timestamp,\n                },\n              },\n            })),\n        }),\n      );\n    }\n    return customers.length;\n  }\n\n  async searchReniecCustomer(identityType: string, identityNumber: string) {\n    return this.props.dynamoDbClient.send(\n      new QueryCommand({\n        TableName: this.props.customersReniecTable,\n        IndexName: DOCUMENT_KEY_INDEX,\n        KeyConditionExpression: \"#documentKey = :documentKey\",\n        ExpressionAttributeNames: {\n          \"#documentKey\": \"documentKey\",\n        },\n        ExpressionAttributeValues: {\n          \":documentKey\": `${identityType}${identityNumber}`,\n        },\n      }),\n    );\n  }\n\n  async update(customerId: string, body: any, isIndividual = true) {\n    const payload = {\n      resource: CustomerResource.CustomerById,\n      httpMethod: HttpMethod.PATCH,\n      pathParameters: { customerId },\n      headers: isIndividual\n        ? this.selectHeaderType({\n            header: {\n              type: HeaderType.Individual,\n            },\n            customer: {\n              id: customerId,\n            },\n          })\n        : this.getBackOfficeHeaders(),\n      body: JSON.stringify(body),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async sendInvitation(customerId: string, body: any) {\n    const payload = {\n      resource: CustomerResource.CustomerById,\n      httpMethod: HttpMethod.PATCH,\n      pathParameters: { customerId },\n      headers: this.getBackOfficeHeaders(),\n      body: JSON.stringify(body),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findByMobile(mobile: string) {\n    const { Username } = await this.props.cognitoClient.send(\n      new AdminGetUserCommand({\n        Username: mobile,\n        UserPoolId: this.props.userPoolId,\n      }),\n    );\n\n    if (!Username) {\n      throw new Error(\"User not found\");\n    }\n\n    return this.findById(Username);\n  }\n\n  private async updateAttribute(\n    customerId: string,\n    attributeName: string,\n    attributeValue?: string,\n  ) {\n    if (!attributeValue) {\n      await this.props.cognitoClient.send(\n        new AdminDeleteUserAttributesCommand({\n          Username: customerId,\n          UserPoolId: this.props.userPoolId,\n          UserAttributeNames: [attributeName],\n        }),\n      );\n    } else {\n      await this.props.cognitoClient.send(\n        new AdminUpdateUserAttributesCommand({\n          Username: customerId,\n          UserPoolId: this.props.userPoolId,\n          UserAttributes: [{ Name: attributeName, Value: attributeValue }],\n        }),\n      );\n    }\n  }\n\n  async updateStatusAndNextAction(customer: { id: string; status?: string }) {\n    await this.updateAttribute(customer.id, \"custom:status\", customer.status);\n  }\n\n  private async updateAttributeDynamo(\n    customerId: string,\n    attributeName: string,\n    attributeValue?: any,\n  ) {\n    if (!attributeValue) {\n      await this.props.dynamoDbClient.send(\n        new UpdateCommand({\n          TableName: this.props.customersTable,\n          Key: { id: customerId },\n          ConditionExpression: \"attribute_exists(id)\",\n          UpdateExpression: `REMOVE ${attributeName}`,\n        }),\n      );\n    } else {\n      await this.props.dynamoDbClient.send(\n        new UpdateCommand({\n          TableName: this.props.customersTable,\n          Key: { id: customerId },\n          ConditionExpression: \"attribute_exists(id)\",\n          UpdateExpression: \"SET #key = :value\",\n          ExpressionAttributeNames: { \"#key\": attributeName },\n          ExpressionAttributeValues: { \":value\": attributeValue },\n        }),\n      );\n    }\n  }\n\n  async updateDocumentKeyValidated(customerId: string, action: string) {\n    switch (action) {\n      case \"validate\": {\n        await this.props.cognitoClient.send(\n          new AdminAddUserToGroupCommand({\n            GroupName: this.props.groupName,\n            UserPoolId: this.props.userPoolId,\n            Username: customerId,\n          }),\n        );\n        await this.updateAttributeDynamo(\n          customerId,\n          \"documentKeyValidated\",\n          true,\n        );\n        break;\n      }\n\n      case \"invalidate\": {\n        await this.props.cognitoClient.send(\n          new AdminRemoveUserFromGroupCommand({\n            GroupName: this.props.groupName,\n            UserPoolId: this.props.userPoolId,\n            Username: customerId,\n          }),\n        );\n        await this.updateAttributeDynamo(customerId, \"documentKeyValidated\");\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  async updateMobile(customer: Partial<ICustomer>) {\n    if (!customer.mobile || !customer.id) {\n      throw new Error(\"Invalid parameters\");\n    }\n    await this.updateAttribute(customer.id, \"phone_number\", customer.mobile);\n    await this.updateAttribute(customer.id, \"phone_number_verified\", \"true\");\n  }\n\n  async deleteById(customerId: string) {\n    const customer = await this.findById(customerId);\n    if (!customer) {\n      throw new Error(\"User not found\");\n    }\n    const errors = [];\n    try {\n      await this.props.cognitoClient.send(\n        new AdminDeleteUserCommand({\n          Username: customerId,\n          UserPoolId: this.props.userPoolId,\n        }),\n      );\n    } catch (e: any) {\n      errors.push(e.message);\n    }\n\n    try {\n      await this.props.dynamoDbClient.send(\n        new DeleteCommand({\n          TableName: this.props.customersTable,\n          Key: { id: customerId },\n        }),\n      );\n    } catch (e: any) {\n      errors.push(e.message);\n    }\n\n    if (errors.length) {\n      throw new Error(errors.join(\" | \"));\n    }\n  }\n\n  async deleteByMobile(mobile: string) {\n    const customerId = await this.findCustomerIdByMobile(mobile);\n    if (!customerId) {\n      throw new Error(\"User not found\");\n    }\n\n    const deleteUserPromise = this.props.cognitoClient.send(\n      new AdminDeleteUserCommand({\n        Username: customerId,\n        UserPoolId: this.props.userPoolId,\n      }),\n    );\n\n    const deleteDynamoDBPromise = this.props.dynamoDbClient.send(\n      new DeleteCommand({\n        TableName: this.props.customersTable,\n        Key: { id: customerId },\n      }),\n    );\n\n    try {\n      await Promise.all([deleteUserPromise, deleteDynamoDBPromise]);\n    } catch (errors) {\n      const errorMessages = errors.map((e: any) => e.message);\n      throw new Error(errorMessages.join(\" | \"));\n    }\n  }\n\n  async deleteByIdentityDocument(type: string, number: string) {\n    const { Items: items } = await this.props.dynamoDbClient.send(\n      new QueryCommand({\n        TableName: this.props.customersTable,\n        IndexName: DOCUMENT_KEY_INDEX,\n        KeyConditionExpression: \"#documentKey = :documentKey\",\n        ExpressionAttributeNames: {\n          \"#documentKey\": \"documentKey\",\n        },\n        ExpressionAttributeValues: {\n          \":documentKey\": `${type}${number}`,\n        },\n      }),\n    );\n\n    if (!items.length) {\n      throw new Error(\"Nothing to delete\");\n    }\n\n    await Promise.all(\n      items\n        .map((item) => item.id)\n        .map(async (customerId) => {\n          try {\n            await this.props.cognitoClient.send(\n              new AdminDeleteUserCommand({\n                Username: customerId,\n                UserPoolId: this.props.userPoolId,\n              }),\n            );\n          } catch (e) {\n            /* empty */\n          }\n\n          try {\n            await this.props.dynamoDbClient.send(\n              new DeleteCommand({\n                TableName: this.props.customersTable,\n                Key: { id: customerId },\n              }),\n            );\n          } catch (e) {\n            /* empty */\n          }\n        }),\n    );\n  }\n\n  async preSignUpTrigger(customer: ICustomer) {\n    const response = await this.props.lambdaClient.send(\n      new InvokeCommand({\n        FunctionName: this.props.customersLambda,\n        Payload: fromUtf8(\n          JSON.stringify({\n            triggerSource: \"PreSignUp_SignUp\",\n            request: {\n              userAttributes: {\n                email: customer.email,\n                phone_number: customer.mobile,\n                \"custom:documentType\": customer.identityDocument.type,\n                \"custom:documentNumber\": customer.identityDocument.number,\n              },\n            },\n          }),\n        ),\n      }),\n    );\n    return this.processLambdaApiResponse(response);\n  }\n\n  private convertToJson(data: any) {\n    const jsonData: { [key: string]: any } = {};\n\n    data.forEach((row: any) => {\n      if (!(row.departamento in jsonData)) jsonData[row.departamento] = {};\n      if (!(row.provincia in jsonData[row.departamento]))\n        jsonData[row.departamento][row.provincia] = [];\n\n      jsonData[row.departamento][row.provincia].push(row.distrito);\n    });\n\n    return JSON.stringify(jsonData);\n  }\n\n  async generateLocationDataset(config: {\n    datasetSource: string;\n    inputFile: string;\n    outputFile: string;\n  }) {\n    let jsonData: any[];\n    switch (config.datasetSource) {\n      case \"file\": {\n        jsonData = await csv().fromFile(config.inputFile);\n        break;\n      }\n      default: {\n        jsonData = await csv().fromStream(\n          (\n            await axios.get(\n              \"https://cloud.minsa.gob.pe/s/GkfcJD8xKHJeCqn/download\",\n              {\n                responseType: \"stream\",\n              },\n            )\n          ).data,\n        );\n        break;\n      }\n    }\n    await writeFile(config.outputFile, this.convertToJson(jsonData));\n  }\n\n  async findAccountingItem(customerId: string) {\n    try {\n      const { Items } = await this.props.dynamoDbClient.send(\n        new QueryCommand({\n          TableName: this.props.accountingTable,\n          KeyConditionExpression: \"#customerId = :customerId\",\n          ExpressionAttributeNames: {\n            \"#customerId\": \"customerId\",\n          },\n          ExpressionAttributeValues: {\n            \":customerId\": customerId,\n          },\n        }),\n      );\n      return Items;\n    } catch (error) {\n      return [];\n    }\n  }\n\n  async findCustomerIdByMobile(mobile: string) {\n    const [customerCognito] = (\n      await this.props.cognitoClient.send(\n        new ListUsersCommand({\n          UserPoolId: this.props.userPoolId,\n          Filter: `phone_number = \"${mobile}\"`,\n        }),\n      )\n    ).Users;\n    if (!customerCognito) {\n      return undefined;\n    }\n    return customerCognito.Username;\n  }\n}\n"]}
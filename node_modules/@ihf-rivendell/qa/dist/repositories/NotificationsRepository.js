"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsRepository = void 0;
const util_utf8_1 = require("@aws-sdk/util-utf8");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const BaseRepository_1 = require("./BaseRepository");
class NotificationsRepository extends BaseRepository_1.BaseRepository {
    props;
    constructor(props) {
        super(props);
        this.props = props;
    }
    async sendContractSignedNotification(customerId, contractId) {
        const response = await this.props.lambdaClient.send(new client_lambda_1.InvokeCommand({
            FunctionName: this.props.notificationsLambda,
            Payload: (0, util_utf8_1.fromUtf8)(JSON.stringify({
                "detail-type": "contract:update:done",
                detail: { customerId, data: { id: contractId } },
            })),
        }));
        return this.processLambdaApiResponse(response);
    }
    async findNotification(id) {
        const result = await this.props.dynamoDbClient.send(new lib_dynamodb_1.GetCommand({
            TableName: this.props.cacheTable,
            Key: { id },
        }));
        return result.Item?.message || "not found";
    }
}
exports.NotificationsRepository = NotificationsRepository;
//# sourceMappingURL=NotificationsRepository.js.map
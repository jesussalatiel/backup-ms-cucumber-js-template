{"version":3,"file":"CardsRepository.js","sourceRoot":"","sources":["../../src/repositories/CardsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport { BaseRepository, BaseRepositoryProps } from \"./BaseRepository\";\nimport { HttpMethod } from \"../integration/assets/httpConstants\";\nimport { ICards } from \"./interfaces/ICards\";\n\nexport enum CardResource {\n  Cards = \"/cards\",\n  CardById = \"/cards/{cardId}\",\n  CardPayments = \"/cards/{cardId}/payments\",\n}\n\nexport interface CardsRepositoryProps extends BaseRepositoryProps {\n  lambdaClient: LambdaClient;\n  cardsLambda: string;\n}\n\nexport class CardsRepository extends BaseRepository {\n  constructor(protected props: CardsRepositoryProps) {\n    super(props);\n  }\n\n  private async sendLambdaCommand(payload: object) {\n    const invokeCommand = new InvokeCommand({\n      FunctionName: this.props.cardsLambda,\n      Payload: fromUtf8(JSON.stringify(payload)),\n    });\n    const response = await this.props.lambdaClient.send(invokeCommand);\n    return this.processLambdaApiResponse(response);\n  }\n\n  async create(cards: ICards) {\n    const payload = {\n      resource: CardResource.Cards,\n      httpMethod: HttpMethod.POST,\n      requestContext: { identity: { sourceIp: cards.sourceIp } },\n      headers: this.getInternetBankingHeaders({\n        customerId: cards.customerId,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findByCustomerId(cards: ICards) {\n    const payload = {\n      resource: CardResource.Cards,\n      httpMethod: HttpMethod.GET,\n      requestContext: { identity: { sourceIp: cards.sourceIp } },\n      headers: this.getInternetBankingHeaders({\n        customerId: cards.customerId,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async update(card: ICards) {\n    const payload = {\n      resource: CardResource.CardById,\n      httpMethod: HttpMethod.PATCH,\n      pathParameters: { cardId: card.id },\n      requestContext: { identity: { sourceIp: card.sourceIp } },\n      headers: this.getInternetBankingHeaders({\n        customerId: card.customerId,\n      }),\n      body: JSON.stringify(card.updateCardBody),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async makePayment(card: Partial<ICards>) {\n    const payload = {\n      resource: CardResource.CardPayments,\n      httpMethod: HttpMethod.POST,\n      pathParameters: { cardId: card.id },\n      headers: {\n        ...this.getInternetBankingHeaders({\n          customerId: card.customerId,\n        }),\n      },\n      body: JSON.stringify(card.createPaymentBody),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async delete(card: ICards) {\n    const payload = {\n      resource: CardResource.CardById,\n      httpMethod: HttpMethod.DELETE,\n      pathParameters: { cardId: card.id },\n      headers: this.getInternetBankingHeaders({\n        customerId: card.customerId,\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n}\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MambuRepository = void 0;
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const BaseRepository_1 = require("./BaseRepository");
class MambuRepository extends BaseRepository_1.BaseRepository {
    props;
    constructor(props) {
        super(props);
        this.props = props;
    }
    async findLoansFromMambu(loanId) {
        const { Item } = await this.props.dynamoDbClient.send(new lib_dynamodb_1.GetCommand({
            TableName: this.props.mambuLoansTable,
            Key: { loanId },
        }));
        return Item;
    }
    async updateInstallmentsStatus(loanId, status, installmentIds) {
        const loan = await this.findLoansFromMambu(loanId);
        const installments = loan.installments
            .filter((installment) => installmentIds.includes(installment.id))
            .map((installment) => ({ ...installment, status }));
        await this.props.dynamoDbClient.send(new lib_dynamodb_1.UpdateCommand({
            TableName: this.props.mambuLoansTable,
            Key: { loanId },
            ConditionExpression: "attribute_exists(loanId)",
            UpdateExpression: "SET #installments = :installments",
            ExpressionAttributeValues: { ":installments": installments },
        }));
    }
    async findCustomersFromMambu(customerId) {
        const { Item } = await this.props.dynamoDbClient.send(new lib_dynamodb_1.GetCommand({
            TableName: this.props.mambuCustomersTable,
            Key: { customerId },
        }));
        return Item;
    }
}
exports.MambuRepository = MambuRepository;
//# sourceMappingURL=MambuRepository.js.map
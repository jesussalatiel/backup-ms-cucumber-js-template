import { LambdaClient } from "@aws-sdk/client-lambda";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { BaseRepository, BaseRepositoryProps } from "./BaseRepository";
import { HeaderType } from "../integration/assets/httpConstants";
import { IPromotion, Lead, LeadSecrets } from "./interfaces/ILeads";
export declare enum LeadsResource {
    Leads = "/leads",
    LeadById = "/leads/{leadId}",
    LeadSales = "/leads/{leadId}/sales"
}
export interface LeadsRepositoryProps extends BaseRepositoryProps {
    lambdaClient: LambdaClient;
    dynamoDbClient: DynamoDBDocumentClient;
    leadsLambda: string;
    leadsTable: string;
    leadsPromotionsTable: string;
    secretId: string;
}
export declare class LeadsRepository extends BaseRepository {
    protected props: LeadsRepositoryProps;
    private secretsManagerClient;
    constructor(props: LeadsRepositoryProps);
    getSecretValue(): Promise<LeadSecrets>;
    setSecretValue(values: LeadSecrets): Promise<void>;
    private sendLambdaCommand;
    findByIdentityDocument(props: {
        lead: Lead;
        isActive?: boolean;
        headerType?: HeaderType;
    }): Promise<any>;
    findByCustomerId(lead: Lead, isActive?: boolean): Promise<any>;
    findPromotionBySKU(sku: string): Promise<IPromotion>;
    createSale(lead: any): Promise<any>;
    findExternalLead(lead: {
        documentType: string;
        documentNumber: string;
        email?: string;
        mobile?: string;
        ip?: "127.0.0.1";
    }): Promise<any>;
    find(lead: Lead): Promise<any>;
    create(lead: Lead): Promise<void>;
    update(lead: Lead, searchLead: number): Promise<void>;
    updateLeadById(lead: Lead): Promise<void>;
    createPromotion(promotion: Partial<IPromotion>): Promise<void>;
    updatePromotion(promotion: Partial<IPromotion>): Promise<void>;
    deleteByIdentityDocument(lead: Lead): Promise<void>;
    private unmarshalLead;
    findAllByIdentityDocument(lead: Lead): Promise<{
        id: any;
        campaignId: any;
        product: {
            type: any;
            subType: any;
        };
        customer: {
            id: any;
        };
        interestRate: any;
        annualNominalRate: any;
        amount: any;
        currency: any;
        creationDate: any;
        expirationDate: any;
        status: any;
        type: any;
    }[]>;
    private selectRangeByProductType;
}

{"version":3,"file":"ContractsRepository.js","sourceRoot":"","sources":["../../src/repositories/ContractsRepository.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvokeCommand, LambdaClient } from \"@aws-sdk/client-lambda\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8\";\nimport {\n  DeleteCommand,\n  DynamoDBDocumentClient,\n  QueryCommand,\n} from \"@aws-sdk/lib-dynamodb\";\nimport { BaseRepository, BaseRepositoryProps } from \"./BaseRepository\";\nimport { HeaderType, HttpMethod } from \"../integration/assets/httpConstants\";\nimport { IContract } from \"./interfaces/IContracts\";\n\nexport enum ContractResource {\n  Contracts = \"/contracts\",\n  ContractById = \"/contracts/{contractId}\",\n}\n\nexport interface ContractsRepositoryProps extends BaseRepositoryProps {\n  dynamoDbClient: DynamoDBDocumentClient;\n  lambdaClient: LambdaClient;\n  contractsLambda: string;\n  contractsTable: string;\n}\n\nexport class ContractsRepository extends BaseRepository {\n  constructor(protected props: ContractsRepositoryProps) {\n    super(props);\n  }\n\n  private async sendLambdaCommand(payload: object) {\n    const invokeCommand = new InvokeCommand({\n      FunctionName: this.props.contractsLambda,\n      Payload: fromUtf8(JSON.stringify(payload)),\n    });\n    const response = await this.props.lambdaClient.send(invokeCommand);\n    return this.processLambdaApiResponse(response);\n  }\n\n  async findById(customerId: string, contractId: string) {\n    const payload = {\n      resource: ContractResource.ContractById,\n      httpMethod: HttpMethod.GET,\n      pathParameters: { contractId },\n      headers: this.selectHeaderType({\n        header: {\n          type: HeaderType.Individual,\n        },\n        customer: {\n          id: customerId,\n        },\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async createContract(contract: IContract) {\n    const payload = {\n      resource: ContractResource.Contracts,\n      httpMethod: HttpMethod.POST,\n      headers: this.selectHeaderType({\n        header: {\n          type: HeaderType.Individual,\n        },\n        customer: {\n          id: contract.customer.id,\n        },\n      }),\n      body: JSON.stringify(contract),\n    };\n\n    return this.sendLambdaCommand(payload);\n  }\n\n  async downloadByLoanId(props: {\n    loan: {\n      id: string;\n    };\n    customer: {\n      id: string;\n    };\n    extended: string;\n  }) {\n    const payload = {\n      resource: ContractResource.Contracts,\n      httpMethod: HttpMethod.GET,\n      queryStringParameters: {\n        loanId: props.loan.id,\n        extended: props.extended,\n      },\n      headers: this.selectHeaderType({\n        header: {\n          type: HeaderType.Individual,\n        },\n        customer: {\n          id: props.customer.id,\n        },\n      }),\n    };\n\n    return this.sendLambdaCommand(payload);\n  }\n\n  async updateStatusSigned(contract: IContract) {\n    const payload = {\n      resource: ContractResource.ContractById,\n      httpMethod: HttpMethod.PATCH,\n      pathParameters: { contractId: contract.id },\n      headers: this.selectHeaderType({\n        header: {\n          type: HeaderType.Individual,\n        },\n        customer: {\n          id: contract.customer.id,\n        },\n      }),\n    };\n    return this.sendLambdaCommand(payload);\n  }\n\n  async findByCustomerId(customerId: string) {\n    const { Items: items } = await this.props.dynamoDbClient.send(\n      new QueryCommand({\n        TableName: this.props.contractsTable,\n        KeyConditionExpression: \"#customerId = :customerId\",\n        ExpressionAttributeNames: {\n          \"#customerId\": \"customerId\",\n        },\n        ExpressionAttributeValues: {\n          \":customerId\": customerId,\n        },\n      }),\n    );\n    if (!items.length) {\n      throw new Error(\"Contracts not found\");\n    }\n    return items;\n  }\n\n  public async deleteByCustomerId(customerId: string) {\n    const result = await this.findByCustomerId(customerId);\n    await Promise.all(\n      result.map(async (item: { id: string }) => {\n        await this.props.dynamoDbClient.send(\n          new DeleteCommand({\n            TableName: this.props.contractsTable,\n            Key: { id: item.id, customerId },\n          }),\n        );\n      }),\n    );\n  }\n}\n"]}
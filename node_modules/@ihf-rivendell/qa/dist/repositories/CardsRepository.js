"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardsRepository = exports.CardResource = void 0;
const client_lambda_1 = require("@aws-sdk/client-lambda");
const util_utf8_1 = require("@aws-sdk/util-utf8");
const BaseRepository_1 = require("./BaseRepository");
const httpConstants_1 = require("../integration/assets/httpConstants");
var CardResource;
(function (CardResource) {
    CardResource["Cards"] = "/cards";
    CardResource["CardById"] = "/cards/{cardId}";
    CardResource["CardPayments"] = "/cards/{cardId}/payments";
})(CardResource || (exports.CardResource = CardResource = {}));
class CardsRepository extends BaseRepository_1.BaseRepository {
    props;
    constructor(props) {
        super(props);
        this.props = props;
    }
    async sendLambdaCommand(payload) {
        const invokeCommand = new client_lambda_1.InvokeCommand({
            FunctionName: this.props.cardsLambda,
            Payload: (0, util_utf8_1.fromUtf8)(JSON.stringify(payload)),
        });
        const response = await this.props.lambdaClient.send(invokeCommand);
        return this.processLambdaApiResponse(response);
    }
    async create(cards) {
        const payload = {
            resource: CardResource.Cards,
            httpMethod: httpConstants_1.HttpMethod.POST,
            requestContext: { identity: { sourceIp: cards.sourceIp } },
            headers: this.getInternetBankingHeaders({
                customerId: cards.customerId,
            }),
        };
        return this.sendLambdaCommand(payload);
    }
    async findByCustomerId(cards) {
        const payload = {
            resource: CardResource.Cards,
            httpMethod: httpConstants_1.HttpMethod.GET,
            requestContext: { identity: { sourceIp: cards.sourceIp } },
            headers: this.getInternetBankingHeaders({
                customerId: cards.customerId,
            }),
        };
        return this.sendLambdaCommand(payload);
    }
    async update(card) {
        const payload = {
            resource: CardResource.CardById,
            httpMethod: httpConstants_1.HttpMethod.PATCH,
            pathParameters: { cardId: card.id },
            requestContext: { identity: { sourceIp: card.sourceIp } },
            headers: this.getInternetBankingHeaders({
                customerId: card.customerId,
            }),
            body: JSON.stringify(card.updateCardBody),
        };
        return this.sendLambdaCommand(payload);
    }
    async makePayment(card) {
        const payload = {
            resource: CardResource.CardPayments,
            httpMethod: httpConstants_1.HttpMethod.POST,
            pathParameters: { cardId: card.id },
            headers: {
                ...this.getInternetBankingHeaders({
                    customerId: card.customerId,
                }),
            },
            body: JSON.stringify(card.createPaymentBody),
        };
        return this.sendLambdaCommand(payload);
    }
    async delete(card) {
        const payload = {
            resource: CardResource.CardById,
            httpMethod: httpConstants_1.HttpMethod.DELETE,
            pathParameters: { cardId: card.id },
            headers: this.getInternetBankingHeaders({
                customerId: card.customerId,
            }),
        };
        return this.sendLambdaCommand(payload);
    }
}
exports.CardsRepository = CardsRepository;
//# sourceMappingURL=CardsRepository.js.map
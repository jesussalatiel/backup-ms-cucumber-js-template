{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/utils/helpers/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport { parse } from \"csv-parse\";\nimport { DateTime } from \"luxon\";\n\nexport const mobileRegex = \"^\\\\+[0-9]{9,12}$\";\n\nexport const sleep = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const setTimeHours = new Date(\n  new Date().setHours(new Date().getHours() + 6),\n).valueOf();\n\nexport const randomPhone = (prefix: string, length: number) => {\n  const phoneNumberDigits = Array.from({ length }, () =>\n    Math.floor(Math.random() * 9).toString(),\n  );\n  return prefix + phoneNumberDigits.join(\"\");\n};\n\nexport const convertToTimestamp = (dateString: string): number => {\n  if (!Number.isNaN(Number(dateString))) {\n    return Number(dateString);\n  }\n  return DateTime.fromISO(dateString).setZone(\"America/Lima\").toMillis();\n};\n\nexport const getDateOneDayAgo = () => {\n  const today = new Date();\n  const yesterday = new Date(today);\n  yesterday.setDate(today.getDate() - 1);\n\n  const year = yesterday.getFullYear();\n  const month = String(yesterday.getMonth() + 1).padStart(2, \"0\");\n  const day = String(yesterday.getDate()).padStart(2, \"0\");\n\n  const dateInString = `${year}-${month}-${day} 00:00:00 GMT`;\n  return dateInString;\n};\n\nexport const readCSV = (fileName: string, filterByColumnName?: string) => {\n  const readFile = new Promise<any[]>((resolve, reject) => {\n    const data: any[] = [];\n    fs.createReadStream(fileName)\n      .pipe(parse({ delimiter: \",\" }))\n      .on(\"data\", (row) => {\n        data.push(row);\n      })\n      .on(\"end\", () => {\n        resolve(data);\n      })\n      .on(\"error\", (error) => {\n        reject(error);\n      });\n  });\n\n  if (filterByColumnName) {\n    const list = readFile.then((data) => {\n      const rowPosition = data[0].indexOf(filterByColumnName);\n      const values = data.slice(1).map((row) => row[rowPosition]);\n      return values;\n    });\n    return list;\n  }\n  return readFile;\n};\n"]}
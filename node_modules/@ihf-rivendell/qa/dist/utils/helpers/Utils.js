"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readCSV = exports.getDateOneDayAgo = exports.convertToTimestamp = exports.randomPhone = exports.setTimeHours = exports.sleep = exports.mobileRegex = void 0;
const fs = __importStar(require("fs"));
const csv_parse_1 = require("csv-parse");
const luxon_1 = require("luxon");
exports.mobileRegex = "^\\+[0-9]{9,12}$";
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
exports.sleep = sleep;
exports.setTimeHours = new Date(new Date().setHours(new Date().getHours() + 6)).valueOf();
const randomPhone = (prefix, length) => {
    const phoneNumberDigits = Array.from({ length }, () => Math.floor(Math.random() * 9).toString());
    return prefix + phoneNumberDigits.join("");
};
exports.randomPhone = randomPhone;
const convertToTimestamp = (dateString) => {
    if (!Number.isNaN(Number(dateString))) {
        return Number(dateString);
    }
    return luxon_1.DateTime.fromISO(dateString).setZone("America/Lima").toMillis();
};
exports.convertToTimestamp = convertToTimestamp;
const getDateOneDayAgo = () => {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    const year = yesterday.getFullYear();
    const month = String(yesterday.getMonth() + 1).padStart(2, "0");
    const day = String(yesterday.getDate()).padStart(2, "0");
    const dateInString = `${year}-${month}-${day} 00:00:00 GMT`;
    return dateInString;
};
exports.getDateOneDayAgo = getDateOneDayAgo;
const readCSV = (fileName, filterByColumnName) => {
    const readFile = new Promise((resolve, reject) => {
        const data = [];
        fs.createReadStream(fileName)
            .pipe((0, csv_parse_1.parse)({ delimiter: "," }))
            .on("data", (row) => {
            data.push(row);
        })
            .on("end", () => {
            resolve(data);
        })
            .on("error", (error) => {
            reject(error);
        });
    });
    if (filterByColumnName) {
        const list = readFile.then((data) => {
            const rowPosition = data[0].indexOf(filterByColumnName);
            const values = data.slice(1).map((row) => row[rowPosition]);
            return values;
        });
        return list;
    }
    return readFile;
};
exports.readCSV = readCSV;
//# sourceMappingURL=Utils.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Connector = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class S3Connector {
    props;
    constructor(props) {
        this.props = props;
    }
    async uploadFile(props) {
        try {
            const fileData = await fs.promises.readFile(props.relativePath);
            const contentTypeMappings = {
                image: "image/",
                video: "video/",
                text: "text/",
            };
            const contentTypePrefix = contentTypeMappings[props.type] || "";
            const params = {
                Bucket: props.bucketName,
                Key: props.name,
                Body: fileData,
                ContentType: `${contentTypePrefix}${props.type}`,
            };
            const putObjectCommand = new client_s3_1.PutObjectCommand(params);
            const response = await this.props.s3Client.send(putObjectCommand);
            return response;
        }
        catch (err) {
            throw new Error(err.message);
        }
    }
    async createDirectory(bucketName, directory) {
        const params = {
            Bucket: bucketName,
            Key: directory,
            Body: "",
        };
        const putObjectCommand = new client_s3_1.PutObjectCommand(params);
        const response = await this.props.s3Client.send(putObjectCommand);
        return response;
    }
    async uploadFilesFromDirectory(settings) {
        const files = await this.getFilesInDirectory(settings.localDirectory);
        const uploadTo = async (file, props, s3Client) => {
            const fileKey = path.join(props.remoteDirectory, path.posix.relative(props.localDirectory, file));
            const pathParts = fileKey.split("\\");
            const fileStream = fs.createReadStream(file);
            const params = {
                Bucket: props.bucketName,
                Key: path.join(props.remoteDirectory, path.basename(fileKey)),
                Body: fileStream,
            };
            if (pathParts.includes("screenshots")) {
                const screenshotsIndex = pathParts.indexOf("screenshots");
                if (screenshotsIndex !== -1) {
                    const subPathParts = pathParts.slice(screenshotsIndex);
                    const subPath = subPathParts.join("\\");
                    const pathKey = path.basename(subPath);
                    const sanitizedFileKey = pathKey.replace(/[\s()]+|failed/g, "-");
                    const finalKey = path.join(props.remoteDirectory, sanitizedFileKey);
                    params.Key = finalKey;
                }
            }
            try {
                const putObjectCommand = new client_s3_1.PutObjectCommand(params);
                const response = await s3Client.send(putObjectCommand);
                return response;
            }
            catch (error) {
                throw new Error(error);
            }
            finally {
                fileStream.close();
            }
        };
        const uploadPromises = files.map((file) => uploadTo(file, settings, this.props.s3Client));
        try {
            await Promise.all(uploadPromises);
            return true;
        }
        catch (error) {
            throw new Error(error);
        }
    }
    async listFiles(bucketName, prefix) {
        const params = {
            Bucket: bucketName,
            Prefix: prefix || "",
        };
        try {
            const listObjectsCommand = new client_s3_1.ListObjectsV2Command(params);
            const response = await this.props.s3Client.send(listObjectsCommand);
            return response.Contents;
        }
        catch (err) {
            throw new Error(`Error listing objects in bucket ${bucketName}: ${err.message}`);
        }
    }
    async deleteItem(bucket, key) {
        try {
            const deleteObjectCommand = new client_s3_1.DeleteObjectCommand({
                Bucket: bucket,
                Key: key,
            });
            await this.props.s3Client.send(deleteObjectCommand);
            return true;
        }
        catch (error) {
            throw new Error(`Error deleting the s3://${bucket}/${key} object: ${error.message}`);
        }
    }
    async deleteAllItemsFromBucket(bucketName) {
        try {
            const itemsInsideOf = await this.listFiles(bucketName);
            await Promise.all(itemsInsideOf.map((item) => this.deleteItem(bucketName, item.Key)));
            return true;
        }
        catch (err) {
            return false;
        }
    }
    async searchFile(bucketName, fileName) {
        const itemsInsideOf = await this.listFiles(bucketName);
        const foundItem = itemsInsideOf.find((item) => item.Key.includes(fileName));
        return foundItem ? foundItem.Key : null;
    }
    async syncToDirectory(props) {
        try {
            const listObjectsCommand = new client_s3_1.ListObjectsV2Command({
                Bucket: props.bucket,
                Prefix: props.prefix,
            });
            const { Contents } = await this.props.s3Client.send(listObjectsCommand);
            if (!Contents || Contents.length === 0) {
                throw new Error("Directory Empty.");
            }
            const downloadPromises = Contents.map(async (s3Object) => {
                const key = s3Object.Key;
                const downloadParams = {
                    Bucket: props.bucket,
                    Key: key,
                };
                const response = await this.props.s3Client.send(new client_s3_1.GetObjectCommand(downloadParams));
                const localFilePath = path.join(props.localDirectory, key);
                const buffer = await response.Body.transformToByteArray();
                if (!fs.existsSync(localFilePath)) {
                    try {
                        const directoryPath = path.dirname(localFilePath);
                        fs.mkdirSync(directoryPath, { recursive: true });
                        if (path.basename(localFilePath) !== undefined &&
                            path.basename(localFilePath) !== ".DS_Store") {
                            fs.writeFileSync(localFilePath, Buffer.from(buffer));
                        }
                    }
                    catch (err) {
                        throw new Error(err);
                    }
                }
            });
            return await Promise.all(downloadPromises);
        }
        catch (err) {
            throw new Error(err);
        }
    }
    async getFilesInDirectory(directoryPath) {
        const dirents = await fs.promises.readdir(directoryPath, {
            withFileTypes: true,
        });
        const files = [];
        await Promise.all(dirents.map(async (dirent) => {
            const filePath = path.join(directoryPath, dirent.name);
            if (dirent.isDirectory()) {
                const subFiles = await this.getFilesInDirectory(filePath);
                files.push(...subFiles);
            }
            else {
                files.push(filePath);
            }
        }));
        return files;
    }
}
exports.S3Connector = S3Connector;
//# sourceMappingURL=S3Connector.js.map
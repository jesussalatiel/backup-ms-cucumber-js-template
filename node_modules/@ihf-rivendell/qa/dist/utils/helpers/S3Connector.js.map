{"version":3,"file":"S3Connector.js","sourceRoot":"","sources":["../../../src/utils/helpers/S3Connector.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  S3Client,\n  PutObjectCommand,\n  ListObjectsV2Command,\n  DeleteObjectCommand,\n  GetObjectCommand,\n} from \"@aws-sdk/client-s3\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { BaseRepositoryProps } from \"../../repositories/BaseRepository\";\n\nexport interface IAWSServiceProps extends BaseRepositoryProps {\n  s3Client: S3Client;\n}\n\nexport class S3Connector {\n  constructor(protected props: IAWSServiceProps) {}\n\n  async uploadFile(props: {\n    bucketName: string;\n    relativePath: string;\n    name: string;\n    type?: string;\n  }) {\n    try {\n      const fileData = await fs.promises.readFile(props.relativePath);\n\n      const contentTypeMappings = {\n        image: \"image/\",\n        video: \"video/\",\n        text: \"text/\",\n      };\n\n      const contentTypePrefix = contentTypeMappings[props.type] || \"\";\n\n      const params = {\n        Bucket: props.bucketName,\n        Key: props.name,\n        Body: fileData,\n        ContentType: `${contentTypePrefix}${props.type}`,\n      };\n\n      const putObjectCommand = new PutObjectCommand(params);\n      const response = await this.props.s3Client.send(putObjectCommand);\n      return response;\n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n\n  async createDirectory(bucketName: string, directory: string) {\n    const params = {\n      Bucket: bucketName,\n      Key: directory,\n      Body: \"\",\n    };\n\n    const putObjectCommand = new PutObjectCommand(params);\n    const response = await this.props.s3Client.send(putObjectCommand);\n    return response;\n  }\n\n  async uploadFilesFromDirectory(settings: {\n    localDirectory: string;\n    bucketName: string;\n    remoteDirectory: string;\n  }) {\n    const files = await this.getFilesInDirectory(settings.localDirectory);\n    const uploadTo = async (file, props, s3Client) => {\n      const fileKey = path.join(\n        props.remoteDirectory,\n        path.posix.relative(props.localDirectory, file),\n      );\n      const pathParts = fileKey.split(\"\\\\\");\n      const fileStream = fs.createReadStream(file);\n\n      const params = {\n        Bucket: props.bucketName,\n        Key: path.join(props.remoteDirectory, path.basename(fileKey)),\n        Body: fileStream,\n      };\n\n      if (pathParts.includes(\"screenshots\")) {\n        const screenshotsIndex = pathParts.indexOf(\"screenshots\");\n        if (screenshotsIndex !== -1) {\n          const subPathParts = pathParts.slice(screenshotsIndex);\n          const subPath = subPathParts.join(\"\\\\\");\n          const pathKey = path.basename(subPath);\n          const sanitizedFileKey = pathKey.replace(/[\\s()]+|failed/g, \"-\");\n          const finalKey = path.join(props.remoteDirectory, sanitizedFileKey);\n          params.Key = finalKey;\n        }\n      }\n\n      try {\n        const putObjectCommand = new PutObjectCommand(params);\n        const response = await s3Client.send(putObjectCommand);\n        return response;\n      } catch (error) {\n        throw new Error(error);\n      } finally {\n        fileStream.close();\n      }\n    };\n\n    const uploadPromises = files.map((file) =>\n      uploadTo(file, settings, this.props.s3Client),\n    );\n\n    try {\n      await Promise.all(uploadPromises);\n      return true;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  async listFiles(bucketName: string, prefix?: string) {\n    const params = {\n      Bucket: bucketName,\n      Prefix: prefix || \"\",\n    };\n\n    try {\n      const listObjectsCommand = new ListObjectsV2Command(params);\n      const response = await this.props.s3Client.send(listObjectsCommand);\n      return response.Contents;\n    } catch (err) {\n      throw new Error(\n        `Error listing objects in bucket ${bucketName}: ${err.message}`,\n      );\n    }\n  }\n\n  async deleteItem(bucket: string, key: string) {\n    try {\n      const deleteObjectCommand = new DeleteObjectCommand({\n        Bucket: bucket,\n        Key: key,\n      });\n      await this.props.s3Client.send(deleteObjectCommand);\n      return true;\n    } catch (error) {\n      throw new Error(\n        `Error deleting the s3://${bucket}/${key} object: ${error.message}`,\n      );\n    }\n  }\n\n  async deleteAllItemsFromBucket(bucketName: string) {\n    try {\n      const itemsInsideOf = await this.listFiles(bucketName);\n\n      await Promise.all(\n        itemsInsideOf.map((item) => this.deleteItem(bucketName, item.Key)),\n      );\n\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  async searchFile(bucketName: string, fileName: string) {\n    const itemsInsideOf = await this.listFiles(bucketName);\n    const foundItem = itemsInsideOf.find((item) => item.Key.includes(fileName));\n    return foundItem ? foundItem.Key : null;\n  }\n\n  async syncToDirectory(props: {\n    bucket: string;\n    prefix: string;\n    localDirectory: string;\n  }) {\n    try {\n      const listObjectsCommand = new ListObjectsV2Command({\n        Bucket: props.bucket,\n        Prefix: props.prefix,\n      });\n      const { Contents } = await this.props.s3Client.send(listObjectsCommand);\n\n      if (!Contents || Contents.length === 0) {\n        throw new Error(\"Directory Empty.\");\n      }\n\n      const downloadPromises = Contents.map(async (s3Object) => {\n        const key = s3Object.Key;\n        const downloadParams = {\n          Bucket: props.bucket,\n          Key: key,\n        };\n\n        const response = await this.props.s3Client.send(\n          new GetObjectCommand(downloadParams),\n        );\n\n        const localFilePath = path.join(props.localDirectory, key);\n        const buffer = await response.Body.transformToByteArray();\n        if (!fs.existsSync(localFilePath)) {\n          try {\n            const directoryPath = path.dirname(localFilePath);\n            fs.mkdirSync(directoryPath, { recursive: true });\n            if (\n              path.basename(localFilePath) !== undefined &&\n              path.basename(localFilePath) !== \".DS_Store\"\n            ) {\n              fs.writeFileSync(localFilePath, Buffer.from(buffer));\n            }\n          } catch (err) {\n            throw new Error(err);\n          }\n        }\n      });\n\n      return await Promise.all(downloadPromises);\n    } catch (err) {\n      throw new Error(err);\n    }\n  }\n\n  private async getFilesInDirectory(directoryPath: string) {\n    const dirents = await fs.promises.readdir(directoryPath, {\n      withFileTypes: true,\n    });\n\n    const files: string[] = [];\n\n    await Promise.all(\n      dirents.map(async (dirent) => {\n        const filePath = path.join(directoryPath, dirent.name);\n        if (dirent.isDirectory()) {\n          const subFiles = await this.getFilesInDirectory(filePath);\n          files.push(...subFiles);\n        } else {\n          files.push(filePath);\n        }\n      }),\n    );\n\n    return files;\n  }\n}\n"]}
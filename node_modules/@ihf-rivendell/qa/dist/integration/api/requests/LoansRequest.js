"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoansRequests = void 0;
const BaseRequest_1 = require("./BaseRequest");
class LoansRequests extends BaseRequest_1.BaseRequests {
    props;
    loansRepository;
    leadId;
    table;
    customerResponse;
    customerId;
    headerType;
    constructor(props, shouldPrintRequest) {
        super(shouldPrintRequest);
        this.props = props;
        this.loansRepository = props.repositories.repository;
        this.table = props.source.table;
        this.customerId = props.source.customer.id;
        this.leadId = props.source.lead.id;
        this.customerResponse = props.source.customer.response;
        this.headerType = props.header.type;
    }
    async create() {
        const createPromises = this.table.hashes().map(async (row) => {
            const buildRequest = this.buildCreate(row);
            await this.printRequest(buildRequest);
            return this.loansRepository.createLoan(buildRequest);
        });
        return this.execPromiseAll(createPromises);
    }
    async update(loanId) {
        const updatePromises = this.table.hashes().map(async (row) => {
            const buildRequest = this.buildUpdate(row);
            await this.printRequest(buildRequest);
            return this.loansRepository.update({
                loanId,
                customerId: this.customerId,
                body: buildRequest,
            });
        });
        return this.execPromiseAll(updatePromises);
    }
    async simulations() {
        const simulationsPromises = this.table.hashes().map(async (row) => {
            const buildRequest = this.buildSimulation(row);
            await this.printRequest(buildRequest);
            return this.loansRepository.createSimulation({
                loan: buildRequest,
                headerType: this.headerType,
                customerId: this.customerId,
            });
        });
        return this.execPromiseAll(simulationsPromises);
    }
    async simulationsSku() {
        const simulationsPromises = this.table.hashes().map(async (row) => {
            const buildRequest = this.buildSimulationSku(row);
            await this.printRequest(buildRequest);
            return this.loansRepository.createSimulation({
                loan: buildRequest,
                headerType: this.headerType,
                customerId: this.customerId,
            });
        });
        return this.execPromiseAll(simulationsPromises);
    }
    async findWithPendingInstallments(withPendingInstallments) {
        return this.loansRepository.findByCustomerId(this.customerId, withPendingInstallments);
    }
    async find(loanId) {
        const buildRequest = this.buildFind(loanId);
        await this.printRequest(buildRequest);
        return this.loansRepository.findById(buildRequest);
    }
    async delete(loanId) {
        const buildRequest = this.buildDelete(loanId);
        await this.printRequest(buildRequest);
        return this.loansRepository.delete(buildRequest);
    }
    async activateLoan(loanId) {
        const activateLoanPromises = this.table.hashes().map(async (row) => {
            const buildRequest = this.buildActivateLoan(loanId);
            await this.printRequest(buildRequest);
            return this.loansRepository.activateLoan({
                loan: buildRequest,
                activateLoan: row.activate.includes("true"),
                headerType: this.headerType,
            });
        });
        return this.execPromiseAll(activateLoanPromises);
    }
    buildActivateLoan(loanId) {
        return {
            id: loanId,
            customer: {
                id: this.customerId,
            },
            status: "ACTIVE",
        };
    }
    buildSimulation(row) {
        return {
            loan: {
                amount: Number(row.amount),
                currency: row.currency,
                paymentDay: Number(row.paymentDay),
            },
            customer: {
                identityDocument: {
                    type: this.customerResponse.identityDocument.type,
                    number: this.customerResponse.identityDocument.number,
                },
            },
            lead: {
                id: this.leadId,
            },
        };
    }
    buildSimulationSku(row) {
        return {
            customer: {
                identityDocument: {
                    type: this.customerResponse.identityDocument.type,
                    number: this.customerResponse.identityDocument.number,
                },
            },
            loan: {
                amount: Number(row.amount),
                currency: row.currency,
            },
            lead: {
                id: this.leadId,
            },
            checkForPromotions: row.promotion,
            order: {
                items: [
                    {
                        sku: row.sku,
                    },
                ],
            },
            metadata: {
                "external.id": row.externalId,
                "external.branch": Number(row.branch),
                "external.seller": row.seller,
            },
        };
    }
    buildUpdate(row) {
        return {
            amount: Number(row.amount),
            currency: row.currency,
            term: Number(row.term),
            paymentDay: Number(row.paymentDay),
        };
    }
    buildCreate(row) {
        return {
            customer: {
                id: this.customerResponse.id,
                identityDocument: {
                    type: this.customerResponse.identityDocument.type,
                    number: this.customerResponse.identityDocument.number,
                },
            },
            amount: parseFloat(row.amount),
            currency: row.currency,
            term: parseInt(row.term, 10),
            type: row.type,
            interestRate: Number(row.interestRate),
            paymentDay: parseInt(row.paymentDay, 10),
            annualNominalRate: row.annualNominalRate,
            lead: {
                id: this.leadId,
            },
        };
    }
    buildFind(loanId) {
        return {
            id: loanId,
            customer: {
                id: this.customerId,
            },
        };
    }
    buildDelete(loanId) {
        return {
            loan: {
                id: loanId,
            },
            customer: {
                id: this.customerId,
            },
        };
    }
}
exports.LoansRequests = LoansRequests;
//# sourceMappingURL=LoansRequest.js.map
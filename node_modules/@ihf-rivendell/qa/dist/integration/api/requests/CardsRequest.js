"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardsRequests = void 0;
const BaseRequest_1 = require("./BaseRequest");
class CardsRequests extends BaseRequest_1.BaseRequests {
    props;
    cardsRepository;
    table;
    customerId;
    sourceIp;
    cardId;
    constructor(props, shouldPrintRequest) {
        super(shouldPrintRequest);
        this.props = props;
        this.cardsRepository = props.repositories.repository;
        this.customerId = props.source.customer.id;
        this.sourceIp = props.source.card.ip || "127.0.0.1";
        this.table = props.source.table;
        this.cardId = props.source.card.id;
    }
    async createCard() {
        const cardData = {
            customerId: this.customerId,
            sourceIp: this.sourceIp,
        };
        await this.printRequest(cardData);
        return this.cardsRepository.create(cardData);
    }
    async generateBines(transactionToken) {
        const updateCardBody = {
            metadata: {
                niubizTransactionToken: transactionToken,
            },
        };
        const buildRequest = this.buildGenerateBines(updateCardBody);
        await this.printRequest(buildRequest);
        return this.cardsRepository.update(buildRequest);
    }
    async getCard() {
        return this.cardsRepository.findByCustomerId({
            customerId: this.customerId,
            sourceIp: this.sourceIp,
        });
    }
    async makePayment() {
        const createPaymentPromises = this.buildCreatePaymentPromises();
        return this.execPromiseAll(createPaymentPromises);
    }
    async delete(cardId) {
        return this.cardsRepository.delete({
            id: cardId,
            customerId: this.customerId,
        });
    }
    buildGenerateBines(updateCardBody) {
        return {
            customerId: this.customerId,
            id: this.cardId,
            sourceIp: this.sourceIp,
            updateCardBody,
        };
    }
    buildCreatePaymentPromises() {
        return (this.table.hashes().map((row) => {
            const buildRequest = {
                customerId: this.customerId,
                id: this.cardId,
                createPaymentBody: {
                    amount: row.amount,
                    currency: row.currency,
                    loanInstallments: [
                        {
                            loanId: row.loanId,
                            installmentId: row.installmentId,
                        },
                    ],
                },
            };
            return this.cardsRepository.makePayment(buildRequest);
        }) || []);
    }
}
exports.CardsRequests = CardsRequests;
//# sourceMappingURL=CardsRequest.js.map
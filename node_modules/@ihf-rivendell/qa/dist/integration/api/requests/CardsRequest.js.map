{"version":3,"file":"CardsRequest.js","sourceRoot":"","sources":["../../../../src/integration/api/requests/CardsRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseRequests } from \"./BaseRequest\";\nimport { IHttpBuilder } from \"../../assets/interface/IHttpBuilder\";\nimport { ICards } from \"../../../repositories/interfaces\";\n\nexport class CardsRequests extends BaseRequests {\n  private cardsRepository: any;\n\n  private table: any;\n\n  private customerId: string;\n\n  private sourceIp: string;\n\n  private cardId: string;\n\n  constructor(\n    protected props: IHttpBuilder,\n    shouldPrintRequest?: boolean,\n  ) {\n    super(shouldPrintRequest);\n    this.cardsRepository = props.repositories.repository;\n    this.customerId = props.source.customer.id;\n    this.sourceIp = props.source.card.ip || \"127.0.0.1\";\n    this.table = props.source.table;\n    this.cardId = props.source.card.id;\n  }\n\n  public async createCard() {\n    const cardData = {\n      customerId: this.customerId,\n      sourceIp: this.sourceIp,\n    };\n    await this.printRequest(cardData);\n    return this.cardsRepository.create(cardData);\n  }\n\n  public async generateBines(transactionToken: any) {\n    const updateCardBody = {\n      metadata: {\n        niubizTransactionToken: transactionToken,\n      },\n    };\n    const buildRequest = this.buildGenerateBines(updateCardBody);\n    await this.printRequest(buildRequest);\n    return this.cardsRepository.update(buildRequest);\n  }\n\n  public async getCard() {\n    return this.cardsRepository.findByCustomerId({\n      customerId: this.customerId,\n      sourceIp: this.sourceIp,\n    });\n  }\n\n  public async makePayment() {\n    const createPaymentPromises = this.buildCreatePaymentPromises();\n    return this.execPromiseAll(createPaymentPromises);\n  }\n\n  public async delete(cardId: string) {\n    return this.cardsRepository.delete({\n      id: cardId,\n      customerId: this.customerId,\n    });\n  }\n\n  private buildGenerateBines(updateCardBody: any) {\n    return {\n      customerId: this.customerId,\n      id: this.cardId,\n      sourceIp: this.sourceIp,\n      updateCardBody,\n    };\n  }\n\n  private buildCreatePaymentPromises() {\n    return (\n      this.table.hashes().map((row) => {\n        const buildRequest = {\n          customerId: this.customerId,\n          id: this.cardId,\n          createPaymentBody: {\n            amount: row.amount,\n            currency: row.currency,\n            loanInstallments: [\n              {\n                loanId: row.loanId,\n                installmentId: row.installmentId,\n              },\n            ],\n          },\n        } as ICards;\n        return this.cardsRepository.makePayment(buildRequest);\n      }) || []\n    );\n  }\n}\n"]}
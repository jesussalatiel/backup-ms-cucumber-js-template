"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeesRequest = void 0;
const BaseRequest_1 = require("./BaseRequest");
class EmployeesRequest extends BaseRequest_1.BaseRequests {
    props;
    table;
    employeesRepository;
    constructor(props, shouldPrintRequest) {
        super(shouldPrintRequest);
        this.props = props;
        this.table = props.source.table;
        this.employeesRepository = props.repositories.repository;
    }
    async findByExternalId() {
        const createPromises = this.table
            .hashes()
            .map((row) => this.employeesRepository.findByExternalId(row.external_id));
        return this.execPromiseAll(createPromises);
    }
    async deleteById(employeeId) {
        return this.employeesRepository.deleteById(employeeId);
    }
    async findById(employeeId) {
        return this.employeesRepository.findById(employeeId);
    }
    async createEmployee() {
        const createPromises = this.table.hashes().map((row) => {
            const buildRequest = this.buildCreateEmployee(row);
            this.printRequest(buildRequest);
            return this.employeesRepository.createEmployee(buildRequest);
        });
        return this.execPromiseAll(createPromises);
    }
    async updateById(employeeId) {
        const createPromises = this.table.hashes().map((row) => {
            const buildRequest = this.buildUpdateEmployee(employeeId, row);
            this.printRequest(buildRequest);
            return this.employeesRepository.updateEmployee(buildRequest);
        });
        return this.execPromiseAll(createPromises);
    }
    async login(username, password) {
        return this.employeesRepository.initiateAuth(username, password);
    }
    async changePassword(username, password) {
        return this.employeesRepository.changePassword(username, password);
    }
    buildUpdateEmployee(employeeId, row) {
        return {
            id: employeeId,
            externalId: row.externalId,
            role: row.role,
            name: row.name,
            middleName: row.middleName,
            lastName: row.lastName,
            motherLastName: row.motherLastName,
            company: row.company,
        };
    }
    buildCreateEmployee(row) {
        return {
            externalId: row.externalId,
            role: row.role,
            name: row.name,
            middleName: row.middleName,
            lastName: row.lastName,
            motherLastName: row.motherLastName,
            company: row.company,
        };
    }
}
exports.EmployeesRequest = EmployeesRequest;
//# sourceMappingURL=EmployeesRequest.js.map
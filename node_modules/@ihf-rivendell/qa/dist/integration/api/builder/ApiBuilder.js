"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpBuilder = void 0;
const CardsRequest_1 = require("../requests/CardsRequest");
const ContractsRequest_1 = require("../requests/ContractsRequest");
const CustomersRequest_1 = require("../requests/CustomersRequest");
const EmployeesRequest_1 = require("../requests/EmployeesRequest");
const LeadsRequest_1 = require("../requests/LeadsRequest");
const LoansRequest_1 = require("../requests/LoansRequest");
class HttpBuilder {
    props = {
        repositories: {
            name: null,
            repository: null,
        },
        header: {
            type: null,
        },
        source: {
            table: null,
            card: {
                id: null,
                ip: null,
            },
            loan: {
                id: null,
            },
            lead: {
                id: null,
            },
            customer: {
                id: null,
                response: null,
                update: {
                    types: null,
                },
            },
        },
        debug: false,
    };
    as(type) {
        this.props.header.type = type;
        return this;
    }
    withCustomerId(customerId) {
        this.props.source.customer.id = customerId;
        return this;
    }
    withLoanId(loanId) {
        this.props.source.loan.id = loanId;
        return this;
    }
    withCardId(cardId) {
        this.props.source.card.id = cardId;
        return this;
    }
    withCustomerResponse(customerResponse) {
        this.props.source.customer.response = customerResponse;
        return this;
    }
    withTable(table) {
        this.props.source.table = table;
        return this;
    }
    useRepository(name) {
        this.props.repositories.name = name;
        return this;
    }
    instanceOf(repository) {
        this.props.repositories.repository = repository;
        return this;
    }
    update(type) {
        this.props.source.customer.update.types = type;
        return this;
    }
    withLeadId(leadId) {
        this.props.source.lead.id = leadId;
        return this;
    }
    enableDebug() {
        this.props.debug = true;
        return this;
    }
    build() {
        const { name } = this.props.repositories;
        switch (name) {
            case "cardsRepository":
                return new CardsRequest_1.CardsRequests(this.props, this.props.debug);
            case "contractsRepository":
                return new ContractsRequest_1.ContractsRequests(this.props, this.props.debug);
            case "customersRepository":
                return new CustomersRequest_1.CustomerRequests(this.props, this.props.debug);
            case "employeesRepository":
                return new EmployeesRequest_1.EmployeesRequest(this.props, this.props.debug);
            case "leadsRepository":
                return new LeadsRequest_1.LeadsRequests(this.props, this.props.debug);
            case "loansRepository":
                return new LoansRequest_1.LoansRequests(this.props, this.props.debug);
            default:
                throw new Error(`Repository '"${name}"' not supported.`);
        }
    }
}
exports.HttpBuilder = HttpBuilder;
//# sourceMappingURL=ApiBuilder.js.map